{
  "name": "skim",
  "version": "0.1.1",
  "description": "Scrape websites simply. Streaming HTML parser combined with a flexible HTTP client.",
  "main": "skim.js",
  "dependencies": {
    "cssax": "0.0.6",
    "read": "~1.0.4",
    "async": "~0.1.22"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/tcr/scrapi.git"
  },
  "author": {
    "name": "Tim Cameron Ryan"
  },
  "license": "MIT",
  "readme": "# skim\n\nParse a stream of HTML using CSS selectors to extract data. Doesn't require a DOM, thus it's fast and low-memory.\n\n## Example\n\nDefine your scraping parameters in a JSON manifest:\n\n```javascript\nrem.stream(\"http://news.ycombinator.com/\").pipe(skim({\n  \"$query\": \"td.title ~ td ~ td.title > a\",\n  \"$each\": {\n    \"title\": \"(text)\",\n    \"link\": \"(attr href)\"\n  }\n}, function (err, json) {\n  console.log(json);\n});\n```\n\nResult:\n\n```javascript\n[ { link: 'https://www.hackerschool.com/blog/5-learning-c-with-gdb',\n    title: 'Learning C with gdb' },\n  { link: 'http://blogs.scientificamerican.com/guest-blog/2012/08/27/the-hidden-truths-about-calories/',\n    title: 'Hidden Truths about Calories' },\n  { link: 'http://cantada.ca/',\n    title: 'Can\\'tada - Tracking the stuff you can\\'t use in Canada' },\n  { link: 'https://blog.gregbrockman.com/2012/08/system-design-stripe-capture-the-flag/',\n    title: 'Seccuring Stripe\\'s Capture the Flag' },\n  { link: 'http://swanson.github.com/blog/2012/08/27/move-your-feet.html',\n    title: 'Move your feet' },\n    ... ]\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tcr/scrapi/issues"
  },
  "homepage": "https://github.com/tcr/scrapi",
  "_id": "skim@0.1.1",
  "_from": "skim@~0.1.0"
}
